import re
import collections
from collections import Counter

def stone_wall(wall):
    print(wall)
    wall_list = re.sub(r"\n", ',', wall)
    print((wall_list.lstrip(',').rstrip(',')).split(','))
    wall_list_sorted = (wall_list.lstrip(',').rstrip(',')).split(',')
    l = []
    for i in range(len(wall_list_sorted)):
        for j in range(len(wall_list_sorted[i])):
            if wall_list_sorted[i][j] != '#':
                l.append(j)
    print(l, 'l')
    if l == []:
        print('0')
        return 0
    print(sorted(l, key=int))

    A = sorted(l, key=int)
    B = A[:]
    A.sort(key=lambda x:B.count(x)) # сортировка по количеству элементов 
    print(A) # [7, 8, 9, 0, 0, 1, 1, 4, 4]

    result = re.findall(str(A[-1]), str(A))
    print(result)
    max_c = result.count(result[-1])
    print(result.count(result[-1]))

    max_counter = []
    for i in A:
        if i not in max_counter:
            if A.count(i) == max_c:
                max_counter.append(i)
    print(max_counter)
    print(max_counter[0], 'finish') 

    return max_counter[0]

if __name__ == '__main__':

    assert stone_wall('''
##########
####0##0##
00##0###00
00########
''') == 0
    
#    assert stone_wall('''
###########
#0###0##0##
#00##0##000
#''') == 4

    assert stone_wall('''
#00#######
#######0##
00######00
''') == 1

    assert stone_wall('''
#####
#####
#####
''') == 0


"""
The Stone Wall
С помощью карты и компаса найти замок не составило проблем. Кроме того, когда вы осматривали окрестности в подзорную трубу,
в нескольких километрах от того места, где вас выбросило на берег, вы увидели небольшую парусную яхту.
Вероятно, она принадлежала другим охотникам за сокровищами лорда Эшера, которые так и не смогли покинуть остров.
Ее осмотр показал, что она в весьма неплохом состоянии и при попутном ветре у вас не будет проблем с возвращением домой.
Ну что ж, одной проблемой меньше - осталось найти Куб.

Как я уже говорил, господин, который здесь раньше жил, весьма ценил уединение, поэтому не удивительно,
что поместье было окружено очень высокой и толстой каменной стеной.
К счастью, вы предвидели подобное и взяли с собой некоторое количество взрывчатки (даже не буду спрашивать, откуда она у вас).
Однако, вряд ли этого скромного запаса хватит, чтобы взорвать стену в любом месте - лучше действовать наверняка и найти самое уязвимое место.

В качестве входных данных вы получите многострочную строку, состоящую из '0' и '#' - вид стены сверху.
'#' будут показывать каменную часть стены, а '0' - пустоты.
Относительное расположение вас и стены следующее: вы смотрите на массив с нижней его части.
Ваша задача - найти координаты места, где стена наиболее узкая (как показано на рисунке ниже).
Ширина стены - это высота столбцов массива (многострочной строки).
Если таких мест несколько - выберите самое левое из них и верните его индекс по-горизонтали (самый левый столбец имеет индекс 0).

Входные данные: многострочная строка, схематически отображающая каменную стену.
Выходные данные: индекс наиболее уязвимого места стены.

Пример:

stone_wall('''
##########
####0##0##
00##0###00
''') == 4


Как это используется: Для архитектурного анализа.

Предусловия:
3x3 <= размер строки <= 10x10
"""
