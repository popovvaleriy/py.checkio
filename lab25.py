#str_number = 'AB'
#radix = 10

def checkio(str_number: str, radix: int) -> int:

    for i in str_number:
        try:                        
            result = int(str_number, radix)
            print(result)
            return result
        except:            
            print('-1')
            return -1


    #return -1


#checkio(str_number, radix)

#These "asserts" using only for self-checking and not necessary for auto-testing
if __name__ == '__main__':
    assert checkio("AF", 16) == 175, "Hex"
    assert checkio("101", 2) == 5, "Bin"
    assert checkio("101", 5) == 26, "5 base"
    assert checkio("Z", 36) == 35, "Z base"
    assert checkio("AB", 10) == -1, "B > A = 10"
    print("Coding complete? Click 'Check' to review your tests and earn cool rewards!")

"""
Помните про основание системы счисления и сами системы счисления из уроков математики? Давайте попрактикуемся.

Дано положительное число как строка и основание системы счисления для него.
Ваша функция должна конвертировать это число в десятичную систему счисления.
Основание системы счисления меньше 37 и больше 1.
В задаче используются цифры и буквы A-Z внутри строчного представления числа.

Будьте осторожны со случаями, когда число нельзя сконвертировать.
Для примера: "1A" не может быть сконвертировано при основании системы счисления 9.
В этих случаях ваша функция должна возвращать -1.

Замечания: Вы легко решите эту задачу при помощи int() конвертации и обработки исключений (Взгляните на ValueError).

Вх. данные: Два аргумента. Число как строка (str) и основание системы счисления как целочисленное (int).
Вых. данные: Сконвертированное число как целочисленное (int).

Пример:
checkio("AF", 16) == 175
checkio("101", 2) == 5
checkio("101", 5) == 26
checkio("Z", 36) == 35
checkio("AB", 10) == -1

Как это используется: Здесь вы попрактикуетесь как работать с различными системами счисления и обрабатывать исключения.

Предусловия:
re.match("\A[A-Z0-9]\Z", str_number)
0 < len(str_number) ≤ 10
2 ≤ radix ≤ 36

У нас есть команда экспертов (advisers) на Checkio, так что если вы застряли с решением какой-то задачи,
то попробуйте использовать “ask advisers” кнопку для того чтобы спросить о помощи.
"""
