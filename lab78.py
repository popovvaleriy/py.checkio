import itertools
from itertools import chain

def flat_list(array):
    #merged = list(itertools.chain(*str(array)))
    #print(merged, "merged") #['[', '[', '[', '2', ']', ']', ',', ' ', '[', '4', ',', ' ', '[', '5', ',', ' ', '6', ',', ' ', '[', '6', ']', ',', ' ', '6', ',', ' ', '6', ',', ' ', '6', ']', ',', ' ', '7', ']', ']']
    #print(list(map(int, array)))
    #print(list(itertools.chain.from_iterable(array)))
    #def merge(lst, res=[]):
    #for a in array:
    #    result = result + flat_list(a) if isinstance(a,list) else [a]

    result = []
    for x in array:
        print(x, "  x")
        if type(x) is list:
            result.extend(flat_list(x))
            print(result, '  type')
        else:
            result.append(x)
            print(result, '  else')

    print(result)

    return result

    

if __name__ == '__main__':
    #assert flat_list([1, 2, 3]) == [1, 2, 3]  #, "First"
    #assert flat_list([1, [2, 2, 2], 4]) == [1, 2, 2, 2, 4]  #, "Second"
    #assert flat_list([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]])  # == [2, 4, 5, 6, 6, 6, 6, 6, 7]  #, "Third"
    assert flat_list([-1, [1, [-2], 1], -1]) == [-1, 1, -2, 1, -1]  #, "Four"
    #assert flat_list([100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]) == [100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]

"""
Flatten a List
Никола любит классифицировать все вещи. Он классифицировал ряд чисел и в результате его усилий,
простая последовательность чисел стала глубоко вложенным списком.
София и Стефан не понимают как он организовал числа и нужно выяснить, что все это значит.
Им нужна ваша помощь, чтобы понять сумасшедший список Николы.

Существует список, который содержит целые числа или другие вложенные списки,
которые могут содержать еще несколько списков и целых чисел, которые затем... вы получаете идею.
Вы должны положить все целые значения, в один плоский список.
Порядок должен быть такой же как и в первоначальном списке с представлением строки слева направо.

Мы должны скрыть эту программу от Николы, сохранив её маленькой и легкой.
Из-за этого, Ваш код должен быть короче, чем 140 символов (с пробелами) .

Входные данные: Вложенный список с целыми числами.
Выходные данные: Одномерный список с целыми числами.

Пример:
flat_list([1, 2, 3]) == [1, 2, 3]
flat_list([1, [2, 2, 2], 4]) == [1, 2, 2, 2, 4]
flat_list([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]]) == [2, 4, 5, 6, 6, 6, 6, 6, 7]
flat_list([-1, [1, [-2], 1], -1]) == [-1, 1, -2, 1, -1]

Как это используется: Эта концепция полезна для разбора и анализа файлов со сложной структурой
и она бросает вызов вашей креативности в написании короткого кода.

Предусловия: 0 ≤ |array| ≤ 100
∀ x ∈ array : -232 < x < 232 or x is a list
depth < 10 
"""
