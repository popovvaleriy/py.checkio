def subnetworks(net, crushes):
    safe = []
    safe2 = []
    for i in range(len(net)): 
        if net[i][0] in crushes and net[i][1] not in crushes:
            safe.append(net[i][1])
        if net[i][1] in crushes and net[i][0] not in crushes:
            safe.append(net[i][0])      
        if net[i][0] not in crushes and net[i][1] not in crushes:
            safe2.append(net[i][0]+net[i][1])
    print(safe) # ['B', 'C', 'D'] список вышек, которые были присоеденены к вышедшей из строя
    print(safe2) # ['DF', 'BC'] другие вышки

    result = (','.join(safe2)) # DF,BC переводим в строку для последующей проверки совпадений
    print(result)
    
    for i in safe: # добавляем вышки которых нет в списке safe
        if i not in result:
            safe2.append(i)
    print(safe2) #['DF', 'BC']

    count_netw = 0
    for i in safe2: # подсчет сетей
        if i.isalpha():
            count_netw = count_netw + 1
    print(count_netw)    

    return count_netw 

if __name__ == '__main__':
    assert subnetworks([['A', 'B'],['B', 'C'],['C', 'D']], ['B']) #== 2, "First"
    assert subnetworks([['A', 'B'],['A', 'C'],['A', 'D'],['D', 'F']], ['A']) #== 3, "Second"
    assert subnetworks([['A', 'B'],['B', 'C'],['C', 'D']], ['C', 'D']) #== 1, "Third"
    assert subnetworks([["A","B"],["A","C"],["A","D"],["D","F"],["B","C"]],["A"]) # == 2
"""
Иногда поврежденные вышки не подлежат восстановлению. В этом случае люди, которые были подключены к разрушенной вышке,
должны переселиться в другой район на время, пока администрация пытается удалить неисправности.

Но если разрушенная вышка отключает несколько районов друг от друга, сеть разделяется на две подсети,
и каждая из них должна иметь своего мэра. Мэры должны использовать голубей, чтобы слать друг другу сообщения.
В случае, когда сеть разделена, Вам не нужны сотни голубей.

Ваша миссия - выяснить, сколько нужно мэров, чтобы контролировать весь город, когда некоторые вышки разрушены.
Другими словами, Вам необходимо выяснить, сколько подсетей будет сформировано после того, как некоторые вышки разрушатся и не будут восстановлены.

Входные данные: Два параметра: структура сети (как список соединений между вышками) и список разрушенных вышек.
Выходные данные: Int. Количество подсетей, сформированных после разрушения вышек.

Пример:
subnetworks([
        ['A', 'B'],
        ['B', 'C'],
        ['C', 'D']
    ], ['B']) == 2

subnetworks([
        ['A', 'B'],
        ['A', 'C'],
        ['A', 'D'],
        ['D', 'F']
    ], ['A']) == 3

subnetworks([
        ['A', 'B'],
        ['B', 'C'],
        ['C', 'D']
    ], ['C', 'D']) == 1
"""
